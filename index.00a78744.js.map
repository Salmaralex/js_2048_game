{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable function-paren-newline */ \"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.emptyfields = [];\n        this.status = \"idle\";\n        this.score = 0;\n        this.rows = document.querySelectorAll(\".field-row\");\n        this.setEmptyfields();\n    }\n    isWin() {\n        return this.initialState.some((row)=>row.some((col)=>col === 2048));\n    }\n    isGameOver() {\n        if (this.emptyfields.length > 0) return false;\n        for(let row = 0; row < this.initialState.length; row++)for(let col = 0; col < this.initialState[row].length; col++){\n            const current = this.initialState[row][col];\n            if (col < this.initialState[row].length - 1 && current === this.initialState[row][col + 1]) return false;\n            if (row < this.initialState.length - 1 && current === this.initialState[row + 1][col]) return false;\n        }\n        return true;\n    }\n    stateChanged(prevState) {\n        return this.initialState.some((row, i)=>row.some((cell, j)=>cell !== prevState[i][j]));\n    }\n    moveLeft() {\n        this.initialState.forEach((row, index)=>{\n            this.initialState[index] = this.merge(row);\n        });\n    }\n    moveRight() {\n        this.initialState.forEach((row, index)=>{\n            const lal = this.merge(row.reverse());\n            this.initialState[index] = lal.reverse();\n        });\n    }\n    moveUp() {\n        this.initialState = this.transpose(this.initialState);\n        this.initialState.forEach((row, index)=>{\n            const lal = this.merge(row);\n            this.initialState[index] = lal;\n        });\n        this.initialState = this.transpose(this.initialState);\n    }\n    moveDown() {\n        this.initialState = this.transpose(this.initialState);\n        this.initialState.forEach((row, index)=>{\n            const lal = this.merge(row.reverse());\n            this.initialState[index] = lal.reverse();\n        });\n        this.initialState = this.transpose(this.initialState);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {}\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {}\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.createPlate();\n            this.createPlate();\n        }\n    }\n    setEmptyfields() {\n        this.emptyfields = [];\n        for(let row = 0; row < this.initialState.length; row++){\n            for(let col = 0; col < this.initialState[row].length; col++)if (this.initialState[row][col] === 0) this.emptyfields.push({\n                row: row,\n                col: col\n            });\n        }\n    }\n    setRandomField() {\n        if (this.emptyfields.length === 0) return null;\n        const randomIndex = Math.floor(Math.random() * this.emptyfields.length);\n        const field = this.emptyfields[randomIndex];\n        this.initialState[field.row][field.col] = Math.random() < 0.1 ? 4 : 2;\n        this.emptyfields.splice(randomIndex, 1);\n        return field;\n    }\n    createTeableArray() {\n        const tableArray = this.initialState.map((row)=>row.map((cell)=>({\n                    content: cell,\n                    classes: cell > 0 ? [\n                        `field-cell--${cell}`\n                    ] : []\n                })));\n        return tableArray;\n    }\n    transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    merge(row) {\n        const rowForMerge = row.filter((x)=>x !== 0);\n        for(let i = 0; i < rowForMerge.length - 1; i++)if (rowForMerge[i] === rowForMerge[i + 1]) {\n            rowForMerge[i] *= 2;\n            rowForMerge[i + 1] = 0;\n            this.score += rowForMerge[i];\n            i++;\n        }\n        const mergedRow = rowForMerge.filter((x)=>x !== 0);\n        return [\n            ...mergedRow,\n            ...Array(4 - mergedRow.length).fill(0)\n        ];\n    }\n    createPlate() {\n        const tableArray = this.createTeableArray();\n        this.updateTable(tableArray);\n        const newPlate = this.setRandomField();\n        if (newPlate !== null) {\n            tableArray[newPlate.row][newPlate.col].content = this.initialState[newPlate.row][newPlate.col];\n            tableArray[newPlate.row][newPlate.col].classes.push(`field-cell--${tableArray[newPlate.row][newPlate.col].content}`);\n            this.updateTable(tableArray);\n        }\n    }\n    updateTable(tableArray) {\n        this.rows.forEach((row, rowIndex)=>{\n            Array.from(row.children).forEach((cell, colIndex)=>{\n                const cellData = tableArray[rowIndex][colIndex];\n                if (cellData.content !== 0) {\n                    cell.textContent = cellData.content;\n                    cell.classList = [\n                        \"field-cell\"\n                    ];\n                    cell.classList.add(cellData.classes);\n                } else {\n                    cell.textContent = \"\";\n                    cell.classList = [\n                        \"field-cell\"\n                    ];\n                }\n            });\n        });\n        this.setEmptyfields();\n    }\n    restart() {\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.emptyfields = [];\n        this.status = \"idle\";\n        this.score = 0;\n        this.setEmptyfields();\n        const tableArray = this.createTeableArray();\n        this.updateTable(tableArray);\n        this.score = 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.getElementsByClassName(\"button start\")[0];\nconst $09e991522ca7e64e$var$score = document.getElementsByClassName(\"game-score\")[0];\nconst $09e991522ca7e64e$var$controls = document.getElementsByClassName(\"controls\")[0];\nconst $09e991522ca7e64e$var$startMessage = document.getElementsByClassName(\"message message-start\")[0];\nconst $09e991522ca7e64e$var$winMessage = document.getElementsByClassName(\"message message-win hidden\")[0];\nconst $09e991522ca7e64e$var$loseMessage = document.getElementsByClassName(\"message message-lose hidden\")[0];\nconst $09e991522ca7e64e$var$restart = document.createElement(\"button\");\n$09e991522ca7e64e$var$restart.className = \"button restart\";\n$09e991522ca7e64e$var$restart.style.display = \"none\";\n$09e991522ca7e64e$var$restart.innerText = \"Restart\";\n$09e991522ca7e64e$var$controls.appendChild($09e991522ca7e64e$var$restart);\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$game.status = \"playing\";\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n    $09e991522ca7e64e$var$checkGameStatus();\n    $09e991522ca7e64e$var$startButton.style.display = \"none\";\n    $09e991522ca7e64e$var$restart.style.display = \"\";\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n});\nfunction $09e991522ca7e64e$var$handleKeyPress(e) {\n    const prevState = $09e991522ca7e64e$var$game.initialState.map((row)=>[\n            ...row\n        ]);\n    switch(e.code){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    if ($09e991522ca7e64e$var$game.stateChanged(prevState)) $09e991522ca7e64e$var$game.createPlate();\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$checkGameStatus();\n}\nfunction $09e991522ca7e64e$var$checkGameStatus() {\n    if ($09e991522ca7e64e$var$game.isWin()) {\n        $09e991522ca7e64e$var$game.status = \"win\";\n        $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n        return;\n    }\n    if ($09e991522ca7e64e$var$game.isGameOver()) {\n        $09e991522ca7e64e$var$game.status = \"lose\";\n        $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n    }\n}\n$09e991522ca7e64e$var$restart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.status = \"idle\";\n    $09e991522ca7e64e$var$startButton.style.display = \"\";\n    $09e991522ca7e64e$var$restart.style.display = \"none\";\n    $09e991522ca7e64e$var$score.innerText = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n});\n\n\n//# sourceMappingURL=index.00a78744.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.getElementsByClassName('button start')[0];\nconst score = document.getElementsByClassName('game-score')[0];\nconst controls = document.getElementsByClassName('controls')[0];\nconst startMessage = document.getElementsByClassName(\n  'message message-start',\n)[0];\nconst winMessage = document.getElementsByClassName(\n  'message message-win hidden',\n)[0];\nconst loseMessage = document.getElementsByClassName(\n  'message message-lose hidden',\n)[0];\nconst restart = document.createElement('button');\n\nrestart.className = 'button restart';\nrestart.style.display = 'none';\nrestart.innerText = 'Restart';\n\ncontrols.appendChild(restart);\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  game.status = 'playing';\n\n  document.addEventListener('keydown', handleKeyPress);\n  checkGameStatus();\n\n  startButton.style.display = 'none';\n  restart.style.display = '';\n  startMessage.classList.add('hidden');\n});\n\nfunction handleKeyPress(e) {\n  const prevState = game.initialState.map((row) => [...row]);\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  if (game.stateChanged(prevState)) {\n    game.createPlate();\n  }\n\n  score.textContent = game.getScore();\n\n  checkGameStatus();\n}\n\nfunction checkGameStatus() {\n  if (game.isWin()) {\n    game.status = 'win';\n    winMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKeyPress);\n\n    return;\n  }\n\n  if (game.isGameOver()) {\n    game.status = 'lose';\n\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKeyPress);\n  }\n}\n\nrestart.addEventListener('click', () => {\n  game.restart();\n  game.status = 'idle';\n  startButton.style.display = '';\n  restart.style.display = 'none';\n  score.innerText = game.getScore();\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n});\n","/* eslint-disable function-paren-newline */\n'use strict';\n\nclass Game {\n  /**\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.emptyfields = [];\n    this.status = 'idle';\n    this.score = 0;\n    this.rows = document.querySelectorAll('.field-row');\n    this.setEmptyfields();\n  }\n\n  isWin() {\n    return this.initialState.some((row) => row.some((col) => col === 2048));\n  }\n\n  isGameOver() {\n    if (this.emptyfields.length > 0) {\n      return false;\n    }\n\n    for (let row = 0; row < this.initialState.length; row++) {\n      for (let col = 0; col < this.initialState[row].length; col++) {\n        const current = this.initialState[row][col];\n\n        if (\n          col < this.initialState[row].length - 1 &&\n          current === this.initialState[row][col + 1]\n        ) {\n          return false;\n        }\n\n        if (\n          row < this.initialState.length - 1 &&\n          current === this.initialState[row + 1][col]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  stateChanged(prevState) {\n    return this.initialState.some((row, i) =>\n      row.some((cell, j) => cell !== prevState[i][j]),\n    );\n  }\n\n  moveLeft() {\n    this.initialState.forEach((row, index) => {\n      this.initialState[index] = this.merge(row);\n    });\n  }\n\n  moveRight() {\n    this.initialState.forEach((row, index) => {\n      const lal = this.merge(row.reverse());\n\n      this.initialState[index] = lal.reverse();\n    });\n  }\n  moveUp() {\n    this.initialState = this.transpose(this.initialState);\n\n    this.initialState.forEach((row, index) => {\n      const lal = this.merge(row);\n\n      this.initialState[index] = lal;\n    });\n\n    this.initialState = this.transpose(this.initialState);\n  }\n\n  moveDown() {\n    this.initialState = this.transpose(this.initialState);\n\n    this.initialState.forEach((row, index) => {\n      const lal = this.merge(row.reverse());\n\n      this.initialState[index] = lal.reverse();\n    });\n\n    this.initialState = this.transpose(this.initialState);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {}\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {}\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n\n      this.createPlate();\n      this.createPlate();\n    }\n  }\n\n  setEmptyfields() {\n    this.emptyfields = [];\n\n    for (let row = 0; row < this.initialState.length; row++) {\n      for (let col = 0; col < this.initialState[row].length; col++) {\n        if (this.initialState[row][col] === 0) {\n          this.emptyfields.push({ row, col });\n        }\n      }\n    }\n  }\n\n  setRandomField() {\n    if (this.emptyfields.length === 0) {\n      return null;\n    }\n\n    const randomIndex = Math.floor(Math.random() * this.emptyfields.length);\n    const field = this.emptyfields[randomIndex];\n\n    this.initialState[field.row][field.col] = Math.random() < 0.1 ? 4 : 2;\n\n    this.emptyfields.splice(randomIndex, 1);\n\n    return field;\n  }\n\n  createTeableArray() {\n    const tableArray = this.initialState.map((row) =>\n      row.map((cell) => ({\n        content: cell,\n        classes: cell > 0 ? [`field-cell--${cell}`] : [],\n      })),\n    );\n\n    return tableArray;\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  merge(row) {\n    const rowForMerge = row.filter((x) => x !== 0);\n\n    for (let i = 0; i < rowForMerge.length - 1; i++) {\n      if (rowForMerge[i] === rowForMerge[i + 1]) {\n        rowForMerge[i] *= 2;\n        rowForMerge[i + 1] = 0;\n        this.score += rowForMerge[i];\n        i++;\n      }\n    }\n\n    const mergedRow = rowForMerge.filter((x) => x !== 0);\n\n    return [...mergedRow, ...Array(4 - mergedRow.length).fill(0)];\n  }\n\n  createPlate() {\n    const tableArray = this.createTeableArray();\n\n    this.updateTable(tableArray);\n\n    const newPlate = this.setRandomField();\n\n    if (newPlate !== null) {\n      tableArray[newPlate.row][newPlate.col].content =\n        this.initialState[newPlate.row][newPlate.col];\n\n      tableArray[newPlate.row][newPlate.col].classes.push(\n        `field-cell--${tableArray[newPlate.row][newPlate.col].content}`,\n      );\n\n      this.updateTable(tableArray);\n    }\n  }\n\n  updateTable(tableArray) {\n    this.rows.forEach((row, rowIndex) => {\n      Array.from(row.children).forEach((cell, colIndex) => {\n        const cellData = tableArray[rowIndex][colIndex];\n\n        if (cellData.content !== 0) {\n          cell.textContent = cellData.content;\n          cell.classList = ['field-cell'];\n          cell.classList.add(cellData.classes);\n        } else {\n          cell.textContent = '';\n          cell.classList = ['field-cell'];\n        }\n      });\n    });\n\n    this.setEmptyfields();\n  }\n\n  restart() {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.emptyfields = [];\n    this.status = 'idle';\n    this.score = 0;\n    this.setEmptyfields();\n\n    const tableArray = this.createTeableArray();\n\n    this.updateTable(tableArray);\n    this.score = 0;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","emptyfields","status","score","rows","document","querySelectorAll","setEmptyfields","isWin","some","row","col","isGameOver","length","current","stateChanged","prevState","i","cell","j","moveLeft","forEach","index","merge","moveRight","lal","reverse","moveUp","transpose","moveDown","getScore","getState","getStatus","start","createPlate","push","setRandomField","randomIndex","Math","floor","random","field","splice","createTeableArray","map","content","classes","matrix","_","colIndex","rowForMerge","filter","x","mergedRow","Array","fill","tableArray","updateTable","newPlate","rowIndex","from","children","cellData","textContent","classList","add","restart","$09e991522ca7e64e$var$startButton","getElementsByClassName","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$controls","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$restart","createElement","$09e991522ca7e64e$var$handleKeyPress","e","code","$09e991522ca7e64e$var$checkGameStatus","remove","removeEventListener","className","style","display","innerText","appendChild","addEventListener"],"version":3,"file":"index.00a78744.js.map"}